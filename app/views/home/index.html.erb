<main class="container mx-auto mt-28 px-5">
  <!-- 入力フィールド -->
  <div class="mb-8">
    <input id="preview-input" type="text" value="こんにちは" placeholder="プレビューしたい文章を入力してください"
      class="border rounded p-2 w-full max-w-xl mx-auto block" />
  </div>

  <!-- フィルターと文字サイズのコントロール -->
  <div class="mb-8 flex flex-wrap gap-4 justify-center items-center">
    <select id="style-filter" class="border rounded p-2">
      <option value="">すべてのスタイル</option>
      <% Font.select(:style).distinct.each do |font| %>
        <option value="<%= font.style %>"><%= font.style %></option>
      <% end %>
    </select>

    <select id="genre-filter" class="border rounded p-2">
      <option value="">すべてのジャンル</option>
      <% Font.select(:genre).distinct.each do |font| %>
        <option value="<%= font.genre %>"><%= font.genre %></option>
      <% end %>
    </select>

    <div>
      <label for="font-size" class="mr-2">文字サイズ</label>
      <input type="range" id="font-size" min="10" max="72" value="24" />
      <span id="font-size-display">24px</span>
    </div>
  </div>

  <!-- フォントプレビュー -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 px-6" id="font-preview-area">
    <% @fonts.each do |font| %>
      <link href="<%= font.font_url %>" rel="stylesheet">
      <div class="border rounded p-4 shadow hover:shadow-lg transition-shadow" data-style="<%= font.style %>" data-genre="<%= font.genre %>">
        <h3 class="text-lg font-semibold mb-2">
          <%= link_to font.name, font_path(font), class: "text-blue-600 hover:text-blue-800 hover:underline font-link" %>
        </h3>
        <p class="preview-text" style="font-family: '<%= font.name %>', sans-serif; font-size: 24px;">
          こんにちは
        </p>
      </div>
    <% end %>
  </div>
</main>

<script>
// グローバルスコープで関数を定義
let updateFontLinks;

document.addEventListener('DOMContentLoaded', function() {
  const previewInput = document.getElementById('preview-input');
  const fontLinks = document.querySelectorAll('.font-link');
  const previewTexts = document.querySelectorAll('.preview-text');
  const fontSizeSlider = document.getElementById('font-size');
  const fontSizeDisplay = document.getElementById('font-size-display');

  // URL更新関数をグローバルスコープに定義
  updateFontLinks = function() {

    if (!previewInput || !fontSizeSlider || fontLinks.length === 0) {
      console.warn('必要な要素が見つかりません');
      return;
    }

    const text = previewInput.value || 'こんにちは';
    const currentSize = fontSizeSlider.value;

    fontLinks.forEach((link, index) => {
      try {
        const url = new URL(link.href, window.location.origin);

        // テキストパラメータの設定
        if (text && text.trim() !== '' && text !== 'こんにちは') {
          url.searchParams.set('preview_text', text);
        } else {
          url.searchParams.delete('preview_text');
        }

        // フォントサイズパラメータの設定
        if (currentSize && currentSize !== '24') {
          url.searchParams.set('font_size', currentSize);
        } else {
          url.searchParams.delete('font_size');
        }

        link.href = url.toString();

      } catch (error) {
        console.error(`リンク${index + 1}のURL更新エラー:`, error);
      }
    });

  };

  // プレビューテキスト更新機能
  if (previewInput && previewTexts.length > 0) {
    previewInput.addEventListener('input', function() {
      const text = this.value || 'こんにちは';

      // プレビューテキストを更新
      previewTexts.forEach(previewText => {
        previewText.textContent = text;
      });

      // URLを更新
      updateFontLinks();
    });
  }

  // フォントサイズ調整機能
  if (fontSizeSlider && fontSizeDisplay && previewTexts.length > 0) {
    fontSizeSlider.addEventListener('input', function() {
      const size = this.value + 'px';
      fontSizeDisplay.textContent = size;

      // プレビューテキストのサイズを更新
      previewTexts.forEach(previewText => {
        previewText.style.fontSize = size;
      });

      // 【修正】URLを更新
      updateFontLinks();
    });
  }

  // 初期状態でURL更新を実行（スライダーがデフォルト値以外の場合）
  if (fontSizeSlider && fontSizeSlider.value !== '24') {
    updateFontLinks();
  }
});
</script>